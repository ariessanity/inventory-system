[{"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/_app.tsx":"1","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/_document.tsx":"2","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/api/hello.ts":"3","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/counter/index.tsx":"4","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/dashboard/_components/StatData.tsx":"5","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/dashboard/index.tsx":"6","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/index.tsx":"7","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/login/index.tsx":"8","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/product/_component/ProductDrawer.tsx":"9","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/product/index.tsx":"10","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_component/DateFilter.tsx":"11","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_component/ExportButton.tsx":"12","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_component/ProductSoldComponent.tsx":"13","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_component/ProductSoldTable.tsx":"14","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_component/TransactionHistoryComponent.tsx":"15","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_modal/ProductSoldModal.tsx":"16","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/index.tsx":"17","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/supplier/_components/SupplierDrawer.tsx":"18","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/supplier/index.tsx":"19","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_component/OrderCard.tsx":"20","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_component/OrderComponent.tsx":"21","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_component/ProductListComponent.tsx":"22","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_component/RadioCard.tsx":"23","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_modal/AddToCartModal.tsx":"24","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_modal/TransactionModal.tsx":"25","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/index.tsx":"26","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/user/_component/UserDrawer.tsx":"27","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/user/index.tsx":"28","/Users/dev.aries/Desktop/dev/inventory-system/client/components/Layout/Authenticated.tsx":"29","/Users/dev.aries/Desktop/dev/inventory-system/client/components/Layout/LogoutModal.tsx":"30","/Users/dev.aries/Desktop/dev/inventory-system/client/components/Layout/Sidebar.tsx":"31","/Users/dev.aries/Desktop/dev/inventory-system/client/components/Layout/Unauthenticated.tsx":"32","/Users/dev.aries/Desktop/dev/inventory-system/client/components/Layout/index.tsx":"33","/Users/dev.aries/Desktop/dev/inventory-system/client/components/Modal/DeleteModal.tsx":"34","/Users/dev.aries/Desktop/dev/inventory-system/client/components/Table/PagButton.tsx":"35","/Users/dev.aries/Desktop/dev/inventory-system/client/components/Table/TableComponent.tsx":"36"},{"size":793,"mtime":1699859954600,"results":"37","hashOfConfig":"38"},{"size":231,"mtime":1699743562885,"results":"39","hashOfConfig":"38"},{"size":307,"mtime":1699743562887,"results":"40","hashOfConfig":"38"},{"size":852,"mtime":1700256583314,"results":"41","hashOfConfig":"38"},{"size":1483,"mtime":1700649896437,"results":"42","hashOfConfig":"38"},{"size":428,"mtime":1700704448432,"results":"43","hashOfConfig":"38"},{"size":3494,"mtime":1699743562887,"results":"44","hashOfConfig":"38"},{"size":3808,"mtime":1700716740360,"results":"45","hashOfConfig":"38"},{"size":8469,"mtime":1700716737530,"results":"46","hashOfConfig":"38"},{"size":8568,"mtime":1700705410100,"results":"47","hashOfConfig":"38"},{"size":2615,"mtime":1700699684723,"results":"48","hashOfConfig":"38"},{"size":481,"mtime":1700561789778,"results":"49","hashOfConfig":"38"},{"size":5199,"mtime":1700631439461,"results":"50","hashOfConfig":"38"},{"size":1746,"mtime":1700700129816,"results":"51","hashOfConfig":"38"},{"size":6178,"mtime":1700701322381,"results":"52","hashOfConfig":"38"},{"size":2158,"mtime":1700703494997,"results":"53","hashOfConfig":"38"},{"size":831,"mtime":1700565082031,"results":"54","hashOfConfig":"38"},{"size":7550,"mtime":1700716694037,"results":"55","hashOfConfig":"38"},{"size":7435,"mtime":1700705421536,"results":"56","hashOfConfig":"38"},{"size":3038,"mtime":1700703618017,"results":"57","hashOfConfig":"38"},{"size":3658,"mtime":1700703626749,"results":"58","hashOfConfig":"38"},{"size":6465,"mtime":1700716487178,"results":"59","hashOfConfig":"38"},{"size":769,"mtime":1700692406657,"results":"60","hashOfConfig":"38"},{"size":5044,"mtime":1700704443553,"results":"61","hashOfConfig":"38"},{"size":3163,"mtime":1700564831040,"results":"62","hashOfConfig":"38"},{"size":756,"mtime":1700398138781,"results":"63","hashOfConfig":"38"},{"size":8771,"mtime":1700716738442,"results":"64","hashOfConfig":"38"},{"size":7354,"mtime":1700705425734,"results":"65","hashOfConfig":"38"},{"size":205,"mtime":1700708674957,"results":"66","hashOfConfig":"38"},{"size":1227,"mtime":1700614060341,"results":"67","hashOfConfig":"38"},{"size":6360,"mtime":1700707655040,"results":"68","hashOfConfig":"38"},{"size":160,"mtime":1699859619118,"results":"69","hashOfConfig":"38"},{"size":111,"mtime":1699859705764,"results":"70","hashOfConfig":"38"},{"size":1088,"mtime":1699968272774,"results":"71","hashOfConfig":"38"},{"size":858,"mtime":1700277771191,"results":"72","hashOfConfig":"38"},{"size":6238,"mtime":1700699956205,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1n6em4o",{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139"},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","suppressedMessages":"154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","suppressedMessages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158"},{"filePath":"159","messages":"160","suppressedMessages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","suppressedMessages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","suppressedMessages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","suppressedMessages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186"},"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/_app.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/_document.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/api/hello.ts",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/counter/index.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/dashboard/_components/StatData.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/dashboard/index.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/index.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/login/index.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/product/_component/ProductDrawer.tsx",["187","188"],[],"import React, { useEffect } from \"react\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n  Input,\n  DrawerFooter,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Select,\n  useToast,\n  Flex,\n} from \"@chakra-ui/react\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { ProductFormValues, productSchema } from \"../../../schema/product/schema\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport {\n  useCreateProductMutation,\n  useUpdateProductMutation,\n} from \"@/store/product/api\";\nimport { Product } from \"@/store/product/types\";\nimport { DeleteIcon } from \"@chakra-ui/icons\";\nimport { categories, units } from \"@/constants\";\n\ninterface ProductDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  deleteProduct: (id: string | undefined) => void;\n  isEdit: boolean | undefined;\n  editData: Product | undefined;\n}\n\nconst ProductDrawer: React.FC<ProductDrawerProps> = ({\n  isOpen,\n  onClose,\n  isEdit,\n  editData,\n  deleteProduct,\n}) => {\n  const [\n    createProduct,\n    {\n      isSuccess: isSuccessCreateProduct,\n      isError: isErrorCreateProduct,\n      error: errorCreateProduct,\n    },\n  ] = useCreateProductMutation();\n\n  const [\n    updateProduct,\n    {\n      isSuccess: isSuccessEditProduct,\n      isError: isErrorEditProduct,\n      error: errorEditProduct,\n    },\n  ] = useUpdateProductMutation();\n\n  const toast = useToast();\n\n  const {\n    handleSubmit,\n    register,\n    reset,\n    setValue,\n    formState: { errors },\n  } = useForm<ProductFormValues>({ resolver: yupResolver(productSchema) });\n\n  useEffect(() => {\n    if (isEdit && editData) {\n      const { name, price, description, quantity, unit, category } = editData;\n      setValue(\"name\", name);\n      setValue(\"price\", price);\n      setValue(\"quantity\", quantity);\n      setValue(\"description\", description);\n      setValue(\"unit\", unit);\n      setValue(\"category\", category);\n    } else {\n      reset();\n    }\n  }, [isEdit, editData, setValue, reset]);\n\n  useEffect(() => {\n    if (isSuccessCreateProduct) {\n      toast({\n        title: `Success`,\n        variant: \"left-accent\",\n        status: \"success\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n\n    if (isErrorCreateProduct) {\n      toast({\n        title: (errorCreateProduct as any)?.data?.response?.message,\n        variant: \"left-accent\",\n        status: \"error\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n  }, [isSuccessCreateProduct, isErrorCreateProduct, errorCreateProduct]);\n\n  useEffect(() => {\n    if (isSuccessEditProduct) {\n      toast({\n        title: `Success`,\n        variant: \"left-accent\",\n        status: \"success\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n\n    if (isErrorEditProduct) {\n      toast({\n        title: (errorEditProduct as any)?.data?.response?.message,\n        variant: \"left-accent\",\n        status: \"error\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n  }, [isSuccessEditProduct, isErrorEditProduct, errorEditProduct]);\n\n  useEffect(() => {\n    if (isEdit && isSuccessEditProduct) {\n      onClose();\n      reset();\n    }\n  }, [isEdit, isSuccessEditProduct, onClose, reset]);\n\n  useEffect(() => {\n    if (!isEdit && isSuccessCreateProduct) {\n      onClose();\n      reset();\n    }\n  }, [isEdit, isSuccessCreateProduct, onClose, reset]);\n\n  const handleOnSubmit: SubmitHandler<ProductFormValues> = async (data) => {\n    if (isEdit) {\n      await updateProduct({ ...data, _id: editData?._id });\n    } else {\n      await createProduct(data);\n\n      // reset();\n      // onClose();\n    }\n  };\n\n  const handleOnCloseDrawer = () => {\n    if (!isEdit) {\n      reset();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" onClose={handleOnCloseDrawer}>\n      <form onSubmit={handleSubmit(handleOnSubmit)}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader fontWeight={\"400\"}>\n            {isEdit ? \"Update Product\" : \"Create Product\"}\n          </DrawerHeader>\n\n          <DrawerBody>\n            <FormControl isInvalid={!!errors?.name} mb={5}>\n              <FormLabel htmlFor=\"name\" fontWeight={\"300\"}>\n                Product\n              </FormLabel>\n              <Input\n                id=\"name\"\n                {...register(\"name\")}\n                placeholder=\"Electrical Tape\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.name && errors.name.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.description} mb={5}>\n              <FormLabel htmlFor=\"description\" fontWeight={\"300\"}>\n                Description\n              </FormLabel>\n              <Input\n                id=\"description\"\n                {...register(\"description\")}\n                placeholder=\"Description\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.description && errors.description.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.price} mb={5}>\n              <FormLabel htmlFor=\"price\" fontWeight={\"300\"}>\n                Price per unit\n              </FormLabel>\n              <Input\n                id=\"price\"\n                {...register(\"price\")}\n                placeholder=\"₱50.00\"\n                type=\"number\"\n                step=\"any\"\n                min=\"0\"\n                max=\"9999999\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.price && errors.price.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.quantity} mb={5}>\n              <FormLabel htmlFor=\"quantity\" fontWeight={\"300\"}>\n                Quantity\n              </FormLabel>\n              <Input\n                id=\"quantity\"\n                {...register(\"quantity\")}\n                placeholder=\"1\"\n                type=\"number\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.quantity && errors.quantity.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.unit} mb={5}>\n              <FormLabel htmlFor=\"unit\" fontWeight={\"300\"}>\n                Unit\n              </FormLabel>\n              <Select\n                id=\"unit\"\n                placeholder=\"Select unit\"\n                {...register(\"unit\")}\n                fontWeight={\"300\"}\n              >\n                {units?.map((unit, index) => (\n                  <option key={index} value={unit.name}>\n                    {unit.name}\n                  </option>\n                ))}\n              </Select>\n              <FormErrorMessage>\n                {errors.unit && errors.unit.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.category} mb={5}>\n              <FormLabel htmlFor=\"category\" fontWeight={\"300\"}>\n                Category\n              </FormLabel>\n              <Select\n                id=\"category\"\n                placeholder=\"Select category\"\n                {...register(\"category\")}\n                fontWeight={\"300\"}\n              >\n                {categories?.map((category, index) => (\n                  <option key={index} value={category}>\n                    {category}\n                  </option>\n                ))}\n              </Select>\n              <FormErrorMessage>\n                {errors.category && errors.category.message}\n              </FormErrorMessage>\n            </FormControl>\n          </DrawerBody>\n\n          <DrawerFooter justifyContent={'space-between'}>\n            <Flex>\n              <DeleteIcon\n                onClick={() => deleteProduct(editData?._id)}\n                color=\"red.500\"\n                cursor=\"pointer\"\n              />\n            </Flex>\n            <Flex>\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type={\"submit\"} colorScheme=\"teal\">\n                {isEdit ? \"Update\" : \"Create\"}\n              </Button>\n            </Flex>\n          </DrawerFooter>\n        </DrawerContent>\n      </form>\n    </Drawer>\n  );\n};\n\nexport default ProductDrawer;\n","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/product/index.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_component/DateFilter.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_component/ExportButton.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_component/ProductSoldComponent.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_component/ProductSoldTable.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_component/TransactionHistoryComponent.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/_modal/ProductSoldModal.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/report/index.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/supplier/_components/SupplierDrawer.tsx",["189","190"],[],"import React, { useEffect } from \"react\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n  Input,\n  DrawerFooter,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Select,\n  useToast,\n  Flex,\n  Textarea,\n} from \"@chakra-ui/react\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport {\n  useCreateSupplierMutation,\n  useUpdateSupplierMutation,\n} from \"@/store/supplier/api\";\nimport { Supplier } from \"@/store/supplier/types\";\n// import { categories } from \"../_data/category\";\n// import { units } from \"../_data/unit\";\nimport { DeleteIcon } from \"@chakra-ui/icons\";\nimport { SupplierFormValues, supplierSchema } from \"../../../schema/supplier/schema\";\n\ninterface SupplierDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  deleteSupplier: (id: string | undefined) => void;\n  isEdit: boolean | undefined;\n  editData: Supplier | undefined;\n}\n\nconst SupplierDrawer: React.FC<SupplierDrawerProps> = ({\n  isOpen,\n  onClose,\n  isEdit,\n  editData,\n  deleteSupplier,\n}) => {\n  const [\n    createSupplier,\n    {\n      isSuccess: isSuccessCreateSupplier,\n      isError: isErrorCreateSupplier,\n      error: errorCreateSupplier,\n    },\n  ] = useCreateSupplierMutation();\n\n  const [\n    updateSupplier,\n    {\n      isSuccess: isSuccessEditSupplier,\n      isError: isErrorEditSupplier,\n      error: errorEditSupplier,\n    },\n  ] = useUpdateSupplierMutation();\n\n  const toast = useToast();\n\n  const {\n    handleSubmit,\n    register,\n    reset,\n    setValue,\n    formState: { errors },\n  } = useForm<SupplierFormValues>({ resolver: yupResolver(supplierSchema) });\n\n  useEffect(() => {\n    if (isEdit && editData) {\n      const { companyName, contactName, contactNumber, email, remarks } =\n        editData;\n      setValue(\"companyName\", companyName);\n      setValue(\"contactName\", contactName);\n      setValue(\"contactNumber\", contactNumber);\n      setValue(\"email\", email);\n      setValue(\"remarks\", remarks);\n    } else {\n      reset();\n    }\n  }, [isEdit, editData, setValue, reset]);\n\n  useEffect(() => {\n    if (isSuccessCreateSupplier) {\n      toast({\n        title: `Success`,\n        variant: \"left-accent\",\n        status: \"success\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n\n    if (isErrorCreateSupplier) {\n      toast({\n        title: (errorCreateSupplier as any)?.data?.response?.message,\n        variant: \"left-accent\",\n        status: \"error\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n  }, [isSuccessCreateSupplier, isErrorCreateSupplier, errorCreateSupplier]);\n\n  useEffect(() => {\n    if (isSuccessEditSupplier) {\n      toast({\n        title: `Success`,\n        variant: \"left-accent\",\n        status: \"success\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n\n    if (isErrorEditSupplier) {\n      toast({\n        title: (errorEditSupplier as any)?.data?.response?.message,\n        variant: \"left-accent\",\n        status: \"error\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n  }, [isSuccessEditSupplier, isErrorEditSupplier, errorEditSupplier]);\n\n  useEffect(() => {\n    if (isEdit && isSuccessEditSupplier) {\n      onClose();\n      reset();\n    }\n  }, [isEdit, isSuccessEditSupplier, onClose, reset]);\n\n  useEffect(() => {\n    if (!isEdit && isSuccessCreateSupplier) {\n      onClose();\n      reset();\n    }\n  }, [isEdit, isSuccessCreateSupplier, onClose, reset]);\n\n  const handleOnSubmit: SubmitHandler<SupplierFormValues> = async (data) => {\n    if (isEdit) {\n      await updateSupplier({ ...data, _id: editData?._id });\n    } else {\n      await createSupplier(data);\n\n      // reset();\n      // onClose();\n    }\n  };\n\n  const handleOnCloseDrawer = () => {\n    if (!isEdit) {\n      reset();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" onClose={handleOnCloseDrawer}>\n      <form onSubmit={handleSubmit(handleOnSubmit)}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader fontWeight={\"400\"}>\n            {isEdit ? \"Update Supplier\" : \"Create Supplier\"}\n          </DrawerHeader>\n\n          <DrawerBody>\n            <FormControl isInvalid={!!errors?.companyName} mb={5}>\n              <FormLabel htmlFor=\"companyName\" fontWeight={\"300\"}>\n                Supplier\n              </FormLabel>\n              <Input\n                id=\"companyName\"\n                {...register(\"companyName\")}\n                placeholder=\"ABC Company\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.companyName && errors.companyName.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.contactName} mb={5}>\n              <FormLabel htmlFor=\"contactName\" fontWeight={\"300\"}>\n                Contact Name\n              </FormLabel>\n              <Input\n                id=\"contactName\"\n                {...register(\"contactName\")}\n                placeholder=\"Juan Dela Cruz\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.contactName && errors.contactName.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.contactNumber} mb={5}>\n              <FormLabel htmlFor=\"contactNumber\" fontWeight={\"300\"}>\n                Contact Number\n              </FormLabel>\n              <Input\n                id=\"contactNumber\"\n                {...register(\"contactNumber\")}\n                placeholder=\"\"\n                type=\"number\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.contactNumber && errors.contactNumber.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.email} mb={5}>\n              <FormLabel htmlFor=\"email\" fontWeight={\"300\"}>\n                Email\n              </FormLabel>\n              <Input\n                id=\"email\"\n                {...register(\"email\")}\n                placeholder=\"juandelacruz@gmail.com\"\n                type=\"email\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.email && errors.email.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.remarks} mb={5}>\n              <FormLabel htmlFor=\"remarks\" fontWeight={\"300\"}>\n                Remarks\n              </FormLabel>\n              <Textarea id=\"remarks\" {...register(\"remarks\")} fontWeight={\"300\"} />\n              <FormErrorMessage>\n                {errors.remarks && errors.remarks.message}\n              </FormErrorMessage>\n            </FormControl>\n          </DrawerBody>\n\n          <DrawerFooter justifyContent={\"space-between\"}>\n            <Flex>\n              <DeleteIcon\n                onClick={() => deleteSupplier(editData?._id)}\n                color=\"red.500\"\n                cursor=\"pointer\"\n              />\n            </Flex>\n            <Flex>\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type={\"submit\"} colorScheme=\"teal\">\n                {isEdit ? \"Update\" : \"Create\"}\n              </Button>\n            </Flex>\n          </DrawerFooter>\n        </DrawerContent>\n      </form>\n    </Drawer>\n  );\n};\n\nexport default SupplierDrawer;\n","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/supplier/index.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_component/OrderCard.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_component/OrderComponent.tsx",["191"],[],"import React, { useEffect } from \"react\";\nimport { useAppDispatch, useAppSelector } from \"@/store\";\nimport { Product } from \"@/store/product/types\";\nimport {\n  Box,\n  Button,\n  Flex,\n  IconButton,\n  Stack,\n  Table,\n  TableCaption,\n  TableContainer,\n  Tbody,\n  Td,\n  Text,\n  Tfoot,\n  Th,\n  Thead,\n  Tr,\n  useDisclosure,\n  useToast,\n} from \"@chakra-ui/react\";\nimport OrderCard from \"./OrderCard\";\nimport { clearCart } from \"@/store/slice/cartSlice\";\nimport TransactionModal from \"../_modal/TransactionModal\";\nimport { useCreateTransactionMutation } from \"@/store/transaction/api\";\n\nconst OrderComponent = () => {\n  const toast = useToast();\n  const dispatch = useAppDispatch();\n  const { cart, totalPrice } = useAppSelector((state: any) => state.cart);\n\n  const [createTransaction, { isSuccess: isSuccessCreateTransaction }] =\n    useCreateTransactionMutation();\n\n  const {\n    isOpen: isOpenTransactionModal,\n    onClose: onCloseTransactionModal,\n    onOpen: onOpenTransactionModal,\n  } = useDisclosure();\n\n  const handlePayment = (paymentReceived: number | undefined, customerName: string) => {\n    createTransaction({\n      cartData: cart as Product[],\n      totalPrice,\n      paymentReceived,\n      paymentChange: totalPrice - (paymentReceived || 0),\n      customerName\n    });\n    dispatch(clearCart());\n    onCloseTransactionModal();\n  };\n\n  useEffect(() => {\n    if (isSuccessCreateTransaction) {\n      if (isSuccessCreateTransaction) {\n        toast({\n          title: `Payment Successful`,\n          variant: \"left-accent\",\n          status: \"success\",\n          position: \"top\",\n          isClosable: true,\n        });\n      }\n    }\n  }, [isSuccessCreateTransaction]);\n\n  return (\n    <>\n      <Flex alignItems={\"center\"} justifyContent={\"space-between\"} mb={5}>\n        <Text fontSize={30} fontWeight={\"300\"}>\n          Current Order\n        </Text>\n        {cart.length !== 0 && (\n          <Flex alignItems={\"center\"}>\n            <Text fontSize={15} fontWeight={\"300\"} mr={2}>\n              Item: {cart?.length}\n            </Text>\n\n            <Button\n              size={\"sm\"}\n              fontWeight={\"300\"}\n              colorScheme=\"red\"\n              onClick={() => dispatch(clearCart())}\n            >\n              Clear Cart\n            </Button>\n          </Flex>\n        )}\n      </Flex>\n\n      <Stack overflowY={\"auto\"} maxH={\"75vh\"} mb={5}>\n        {cart.map((cartItem: Product, index: number) => (\n          <OrderCard\n            key={cartItem?._id + index}\n            name={cartItem?.name}\n            quantity={cartItem?.quantity}\n            price={cartItem?.price}\n            unit={cartItem?.unit}\n            category={cartItem?.category}\n            description={cartItem?.description}\n            productId={cartItem?._id}\n          />\n        ))}\n      </Stack>\n      <Flex\n        justifyContent={\"space-between\"}\n        bottom={0}\n        position={\"sticky\"}\n        flexDirection={\"column\"}\n      >\n        <Flex fontSize={\"lg\"} fontWeight={\"300\"} mb={4} justifyContent={'space-between'}> \n          <Text>Total Price:</Text>\n          <Text fontWeight={\"semibold\"}>₱{totalPrice.toFixed(2)}</Text>\n        </Flex>\n        <Button\n          isDisabled={cart.length === 0}\n          colorScheme=\"teal\"\n          fontWeight={\"300\"}\n          onClick={onOpenTransactionModal}\n          whiteSpace={\"pre-line\"}\n        >\n          Proceed to payment\n        </Button>\n      </Flex>\n      <TransactionModal\n        isOpen={isOpenTransactionModal}\n        totalPrice={totalPrice}\n        onClose={onCloseTransactionModal}\n        handleTransaction={handlePayment}\n      />\n    </>\n  );\n};\n\nexport default OrderComponent;\n","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_component/ProductListComponent.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_component/RadioCard.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_modal/AddToCartModal.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/_modal/TransactionModal.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/transaction/index.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/pages/user/_component/UserDrawer.tsx",["192","193"],[],"import React, { useEffect } from \"react\";\nimport {\n  Drawer,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  DrawerHeader,\n  DrawerBody,\n  Input,\n  DrawerFooter,\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Select,\n  useToast,\n  Flex,\n} from \"@chakra-ui/react\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { UserFormValues, userSchema } from \"../../../schema/user/schema\";\nimport { SubmitHandler, useForm } from \"react-hook-form\";\nimport { useSignupMutation, useUpdateUserMutation } from \"@/store/user/api\";\nimport { User } from \"@/store/user/types\";\nimport { DeleteIcon } from \"@chakra-ui/icons\";\nimport { roles } from \"@/constants\";\n\ninterface UserDrawerProps {\n  isOpen: boolean;\n  onClose: () => void;\n  deleteUser: (id: string | undefined) => void;\n  isEdit: boolean | undefined;\n  editData: User | undefined;\n}\n\nconst UserDrawer: React.FC<UserDrawerProps> = ({\n  isOpen,\n  onClose,\n  isEdit,\n  editData,\n  deleteUser,\n}) => {\n  const [\n    createUser,\n    {\n      isSuccess: isSuccessCreateUser,\n      isError: isErrorCreateUser,\n      error: errorCreateUser,\n    },\n  ] = useSignupMutation();\n\n  const [\n    updateUser,\n    {\n      isSuccess: isSuccessEditUser,\n      isError: isErrorEditUser,\n      error: errorEditUser,\n    },\n  ] = useUpdateUserMutation();\n\n  const toast = useToast();\n\n  const {\n    handleSubmit,\n    register,\n    reset,\n    setValue,\n    formState: { errors },\n  } = useForm<UserFormValues>({ resolver: yupResolver(userSchema) });\n\n  useEffect(() => {\n    if (isEdit && editData) {\n      const { username, email, role, firstname, lastname, mobileNumber } =\n        editData;\n      setValue(\"username\", username);\n      setValue(\"email\", email);\n      setValue(\"role\", role);\n      setValue(\"firstname\", firstname);\n      setValue(\"lastname\", lastname);\n      setValue(\"mobileNumber\", mobileNumber);\n    } else {\n      reset();\n    }\n  }, [isEdit, editData, setValue, reset]);\n\n  useEffect(() => {\n    if (isSuccessCreateUser) {\n      toast({\n        title: `Success`,\n        variant: \"left-accent\",\n        status: \"success\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n\n    if (isErrorCreateUser) {\n      toast({\n        title: (errorCreateUser as any)?.data?.response?.message,\n        variant: \"left-accent\",\n        status: \"error\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n  }, [isSuccessCreateUser, isErrorCreateUser, errorCreateUser]);\n\n  useEffect(() => {\n    if (isSuccessEditUser) {\n      toast({\n        title: `Success`,\n        variant: \"left-accent\",\n        status: \"success\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n\n    if (isErrorEditUser) {\n      toast({\n        title: (errorEditUser as any)?.data?.response?.message,\n        variant: \"left-accent\",\n        status: \"error\",\n        position: \"top\",\n        isClosable: true,\n      });\n    }\n  }, [isSuccessEditUser, isErrorEditUser, errorEditUser]);\n\n  useEffect(() => {\n    if (isEdit && isSuccessEditUser) {\n      onClose();\n      reset();\n    }\n  }, [isEdit, isSuccessEditUser, onClose, reset]);\n\n  useEffect(() => {\n    if (!isEdit && isSuccessCreateUser) {\n      onClose();\n      reset();\n    }\n  }, [isEdit, isSuccessCreateUser, onClose, reset]);\n\n  const handleOnSubmit: SubmitHandler<UserFormValues> = async (data) => {\n    if (isEdit) {\n      await updateUser({ ...data, _id: editData?._id });\n    } else {\n      await createUser(data);\n    }\n  };\n\n  const handleOnCloseDrawer = () => {\n    if (!isEdit) {\n      reset();\n    }\n\n    onClose();\n  };\n\n  return (\n    <Drawer isOpen={isOpen} placement=\"right\" onClose={handleOnCloseDrawer}>\n      <form onSubmit={handleSubmit(handleOnSubmit)}>\n        <DrawerOverlay />\n        <DrawerContent>\n          <DrawerCloseButton />\n          <DrawerHeader fontWeight={\"400\"}>\n            {isEdit ? \"Update User\" : \"Create User\"}\n          </DrawerHeader>\n\n          <DrawerBody>\n            <FormControl isInvalid={!!errors?.username} mb={5} isRequired>\n              <FormLabel htmlFor=\"username\" fontWeight={\"300\"}>\n                Username\n              </FormLabel>\n              <Input\n                id=\"username\"\n                {...register(\"username\")}\n                placeholder=\"username\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.username && errors.username.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl\n              isInvalid={!!errors?.password}\n              mb={5}\n              isDisabled={isEdit}\n              isRequired={!isEdit}\n            >\n              <FormLabel htmlFor=\"password\" fontWeight={\"300\"}>\n                Password\n              </FormLabel>\n              <Input\n                id=\"password\"\n                {...register(\"password\")}\n                placeholder=\"********\"\n                fontWeight={\"300\"}\n                type=\"password\"\n              />\n              <FormErrorMessage>\n                {errors.password && errors.password.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.firstname} mb={5} isRequired>\n              <FormLabel htmlFor=\"firstname\" fontWeight={\"300\"}>\n                First name\n              </FormLabel>\n              <Input\n                id=\"firstname\"\n                {...register(\"firstname\")}\n                placeholder=\"Juan\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.firstname && errors.firstname.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.lastname} mb={5}>\n              <FormLabel htmlFor=\"lastname\" fontWeight={\"300\"}>\n                Last Name\n              </FormLabel>\n              <Input\n                id=\"lastname\"\n                {...register(\"lastname\")}\n                placeholder=\"Dela Cruz\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.lastname && errors.lastname.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.email} mb={5} isRequired>\n              <FormLabel htmlFor=\"email\" fontWeight={\"300\"}>\n                Email\n              </FormLabel>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                {...register(\"email\")}\n                placeholder=\"juan@gmail.com\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.email && errors.email.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.mobileNumber} mb={5} isRequired>\n              <FormLabel htmlFor=\"mobileNumber\" fontWeight={\"300\"}>\n                Mobile Number\n              </FormLabel>\n              <Input\n                id=\"mobileNumber\"\n                {...register(\"mobileNumber\")}\n                type=\"number\"\n                fontWeight={\"300\"}\n              />\n              <FormErrorMessage>\n                {errors.mobileNumber && errors.mobileNumber.message}\n              </FormErrorMessage>\n            </FormControl>\n\n            <FormControl isInvalid={!!errors?.role} mb={5} isRequired>\n              <FormLabel htmlFor=\"role\" fontWeight={\"300\"}>\n                Role\n              </FormLabel>\n              <Select\n                id=\"role\"\n                placeholder=\"Select role\"\n                {...register(\"role\")}\n                fontWeight={\"300\"}\n              >\n                {roles?.map((role, index) => (\n                  <option key={index} value={role.name}>\n                    {role.name}\n                  </option>\n                ))}\n              </Select>\n              <FormErrorMessage>\n                {errors.role && errors.role.message}\n              </FormErrorMessage>\n            </FormControl>\n          </DrawerBody>\n\n          <DrawerFooter justifyContent={\"space-between\"}>\n            <Flex>\n              {editData?.role !== \"Super Admin\" && (\n                <DeleteIcon\n                  onClick={() => deleteUser(editData?._id)}\n                  color=\"red.500\"\n                  cursor=\"pointer\"\n                />\n              )}\n            </Flex>\n            <Flex>\n              <Button variant=\"outline\" mr={3} onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type={\"submit\"} colorScheme=\"teal\">\n                {isEdit ? \"Update\" : \"Create\"}\n              </Button>\n            </Flex>\n          </DrawerFooter>\n        </DrawerContent>\n      </form>\n    </Drawer>\n  );\n};\n\nexport default UserDrawer;\n","/Users/dev.aries/Desktop/dev/inventory-system/client/pages/user/index.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/components/Layout/Authenticated.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/components/Layout/LogoutModal.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/components/Layout/Sidebar.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/components/Layout/Unauthenticated.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/components/Layout/index.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/components/Modal/DeleteModal.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/components/Table/PagButton.tsx",[],[],"/Users/dev.aries/Desktop/dev/inventory-system/client/components/Table/TableComponent.tsx",["194"],[],"import { usePagination, useSortBy, useTable } from \"react-table\";\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tfoot,\n  Tr,\n  Th,\n  Td,\n  TableCaption,\n  TableContainer,\n  Button,\n  Text,\n  Flex,\n  Icon,\n  Box,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport PagButton from \"./PagButton\";\nimport { AiOutlineLeft, AiOutlineRight } from \"react-icons/ai\";\nimport { ChevronDownIcon, ChevronUpIcon } from \"@chakra-ui/icons\";\nimport { useEffect, useMemo } from \"react\";\n\ninterface TableProps {\n  columns: any;\n  data: any;\n  count: number | undefined;\n  isLoading: boolean;\n  currentPage: number;\n  onPageChange: (pageIndex: number) => void;\n  onSortChange: (column: any) => void;\n}\n\nconst initialState = {\n  pageSize: 20,\n};\n\nconst TableComponent: React.FC<TableProps> = ({\n  columns,\n  data,\n  isLoading,\n  count = 0,\n  currentPage,\n  onPageChange,\n  onSortChange,\n}) => {\n  const _data = useMemo(() => data, [data]);\n  const _columns = useMemo(() => columns, [columns]);\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headers,\n    rows,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageCount,\n    pageOptions,\n    gotoPage,\n    state: { pageIndex, pageSize },\n  } = useTable(\n    {\n      columns: _columns,\n      data: _data,\n      initialState,\n      pageCount: count,\n      manualPagination: true,\n      manualSortBy: true,\n      sortDescFirst: true,\n      defaultColumn: {\n        width: \"auto\",\n      },\n    },\n    useSortBy,\n    usePagination\n  );\n\n  useEffect(() => {\n    if (currentPage !== pageIndex + 1) {\n      gotoPage(0);\n      onPageChange(1);\n    }\n  }, [currentPage, pageIndex, onPageChange]);\n\n  const handlePreviousPage = () => {\n    if (canPreviousPage) {\n      const newPageIndex = pageIndex > 0 ? pageIndex - 1 : 0;\n      onPageChange(newPageIndex + 1);\n      gotoPage(newPageIndex);\n    }\n  };\n\n  const handleNextPage = () => {\n    if (canNextPage) {\n      const newPageIndex =\n        pageIndex + 1 < pageCount ? pageIndex + 1 : pageIndex;\n      onPageChange(newPageIndex + 1);\n      gotoPage(newPageIndex);\n    }\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Box textAlign={\"center\"} my={30}>\n          <Spinner\n            thickness=\"3px\"\n            speed=\"0.65s\"\n            emptyColor=\"gray.200\"\n            color=\"blue.500\"\n            size=\"xl\"\n          />\n        </Box>\n      ) : (\n        <TableContainer\n          overflowX={\"auto\"}\n          overflowY={\"auto\"}\n          maxH={\"75vh\"}\n          borderWidth={1}\n        >\n          <Table\n            layout=\"fixed\"\n            variant=\"simple\"\n            colorScheme=\"gray\"\n            fontWeight={\"300\"}\n            {...getTableProps()}\n          >\n            <Thead\n              backgroundColor={\"gray.300\"}\n              position=\"sticky\"\n              top={0}\n              zIndex={1}\n            >\n              <Tr>\n                {headers.map((column, indexHeader) => (\n                  <Th\n                    {...(column.getHeaderProps(column.getSortByToggleProps()),\n                    {\n                      style: {\n                        width: column.width,\n                        whiteSpace: \"pre-line\",\n                      },\n                    })}\n                    onClick={() => onSortChange(column)}\n                    key={indexHeader}\n                  >\n                    <Flex alignItems={\"center\"}>\n                      {column.render(\"Header\")}\n                      {(column as any).sortDirection === \"asc\" ? (\n                        <ChevronDownIcon />\n                      ) : (column as any).sortDirection === \"desc\" ? (\n                        <ChevronUpIcon />\n                      ) : null}\n                    </Flex>\n                  </Th>\n                ))}\n              </Tr>\n            </Thead>\n            <Tbody {...getTableBodyProps()}>\n              {page.map((row, indexRow) => {\n                prepareRow(row);\n                return (\n                  <Tr {...row.getRowProps()} key={indexRow}>\n                    {row.cells.map((cell, indexCell) => {\n                      return (\n                        <Td\n                          {...cell.getCellProps({\n                            style: {\n                              width: cell.column.width,\n                              whiteSpace: \"pre-line\",\n                            },\n                          })}\n                          key={indexCell}\n                        >\n                          {cell.render(\"Cell\")}\n                        </Td>\n                      );\n                    })}\n                  </Tr>\n                );\n              })}\n            </Tbody>\n          </Table>\n        </TableContainer>\n      )}\n\n      {data?.length == 0 && (\n        <Text my={4} textAlign={\"center\"} fontWeight={\"300\"}>\n          No Data Found\n        </Text>\n      )}\n\n      <Flex\n        p={5}\n        w=\"full\"\n        alignItems=\"center\"\n        justifyContent=\"space-between\"\n        flexDirection={{ base: \"column\", md: \"row\" }}\n      >\n        <Flex>\n          <Text fontWeight={\"300\"}>Total of {count} items</Text>\n        </Flex>\n        <Flex alignItems={\"center\"} justifyContent={\"center\"}>\n          <PagButton onClick={handlePreviousPage} disabled={!canPreviousPage}>\n            <Icon\n              as={AiOutlineLeft}\n              color=\"gray.700\"\n              _dark={{\n                color: \"gray.200\",\n              }}\n              boxSize={4}\n              disabled={!canPreviousPage}\n            />\n          </PagButton>\n          <Text fontWeight={\"300\"} mx={5}>\n            {isLoading\n              ? \"...\"\n              : `Page ${pageIndex + 1} of ${\n                  Math.ceil(count / pageSize) === 0\n                    ? 1\n                    : Math.ceil(count / pageSize)\n                }`}\n          </Text>\n          <PagButton\n            onClick={handleNextPage}\n            disabled={pageIndex + 1 === Math.ceil(count / pageSize)}\n          >\n            <Icon\n              as={AiOutlineRight}\n              color=\"gray.700\"\n              _dark={{\n                color: \"gray.200\",\n              }}\n              boxSize={4}\n            />\n          </PagButton>\n        </Flex>\n      </Flex>\n    </>\n  );\n};\n\nexport default TableComponent;\n",{"ruleId":"195","severity":1,"message":"196","line":107,"column":6,"nodeType":"197","endLine":107,"endColumn":72,"suggestions":"198"},{"ruleId":"195","severity":1,"message":"196","line":129,"column":6,"nodeType":"197","endLine":129,"endColumn":66,"suggestions":"199"},{"ruleId":"195","severity":1,"message":"196","line":109,"column":6,"nodeType":"197","endLine":109,"endColumn":75,"suggestions":"200"},{"ruleId":"195","severity":1,"message":"196","line":131,"column":6,"nodeType":"197","endLine":131,"endColumn":69,"suggestions":"201"},{"ruleId":"195","severity":1,"message":"196","line":66,"column":6,"nodeType":"197","endLine":66,"endColumn":34,"suggestions":"202"},{"ruleId":"195","severity":1,"message":"196","line":105,"column":6,"nodeType":"197","endLine":105,"endColumn":63,"suggestions":"203"},{"ruleId":"195","severity":1,"message":"196","line":127,"column":6,"nodeType":"197","endLine":127,"endColumn":57,"suggestions":"204"},{"ruleId":"195","severity":1,"message":"205","line":85,"column":6,"nodeType":"197","endLine":85,"endColumn":44,"suggestions":"206"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'toast'. Either include it or remove the dependency array.","ArrayExpression",["207"],["208"],["209"],["210"],["211"],["212"],["213"],"React Hook useEffect has a missing dependency: 'gotoPage'. Either include it or remove the dependency array.",["214"],{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"229","fix":"230"},"Update the dependencies array to be: [isSuccessCreateProduct, isErrorCreateProduct, errorCreateProduct, toast]",{"range":"231","text":"232"},"Update the dependencies array to be: [isSuccessEditProduct, isErrorEditProduct, errorEditProduct, toast]",{"range":"233","text":"234"},"Update the dependencies array to be: [isSuccessCreateSupplier, isErrorCreateSupplier, errorCreateSupplier, toast]",{"range":"235","text":"236"},"Update the dependencies array to be: [isSuccessEditSupplier, isErrorEditSupplier, errorEditSupplier, toast]",{"range":"237","text":"238"},"Update the dependencies array to be: [isSuccessCreateTransaction, toast]",{"range":"239","text":"240"},"Update the dependencies array to be: [isSuccessCreateUser, isErrorCreateUser, errorCreateUser, toast]",{"range":"241","text":"242"},"Update the dependencies array to be: [isSuccessEditUser, isErrorEditUser, errorEditUser, toast]",{"range":"243","text":"244"},"Update the dependencies array to be: [currentPage, pageIndex, onPageChange, gotoPage]",{"range":"245","text":"246"},[2491,2557],"[isSuccessCreateProduct, isErrorCreateProduct, errorCreateProduct, toast]",[3020,3080],"[isSuccessEditProduct, isErrorEditProduct, errorEditProduct, toast]",[2581,2650],"[isSuccessCreateSupplier, isErrorCreateSupplier, errorCreateSupplier, toast]",[3116,3179],"[isSuccessEditSupplier, isErrorEditSupplier, errorEditSupplier, toast]",[1646,1674],"[isSuccessCreateTransaction, toast]",[2405,2462],"[isSuccessCreateUser, isErrorCreateUser, errorCreateUser, toast]",[2916,2967],"[isSuccessEditUser, isErrorEditUser, errorEditUser, toast]",[1588,1626],"[currentPage, pageIndex, onPageChange, gotoPage]"]