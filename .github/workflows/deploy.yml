name: AWS-EC2 Instance CD

on:
  push:
    branches:
      - 'prod'

jobs:
  build:

    name: NextJS Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './client/package-lock.json'

    - run: npm install
      working-directory: ./client
    - run: npm run build --if-present
      working-directory: ./client

  docker:

    needs: build
    name: Docker Build and Push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN_TWO }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build and push FE
        uses: docker/build-push-action@v2
        with:
          context: ./client
          file: ./client/Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/client:latest

      - name: Build and push Nginx
        uses: docker/build-push-action@v3
        with:
          context: ./nginx
          file: ./nginx/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/nginx:latest
      
          name: Docker Build and Push

      - name: Checkout
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN_TWO }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push BE
        uses: docker/build-push-action@v3
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/server:latest

      - name: AWS SSM Send-Command
        uses: peterkimzz/aws-ssm-send-command@v1.1.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          instance-ids: ${{ secrets.AWS_INSTANCE_ID }}
          working-directory: /home/ubuntu
          command: |
            sudo docker-compose stop
            sudo docker-compose rm -f
            sudo docker-compose pull
            sudo docker-compose up -d
            sudo docker image prune -af
          comment: docker-compose.yml file re-pulls newer versions of inventory-system images and runs them on the instance.

  # on-success:
  #   name: AWS-EC2 Instance CD
  #   runs-on: ubuntu-latest
  #   if: ${{ github.event.workflow_run.conclusion == 'success' }}
  #   steps:
      # - name: AWS SSM Send-Command
      #   uses: peterkimzz/aws-ssm-send-command@v1.1.1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      #     instance-ids: ${{ secrets.AWS_INSTANCE_ID }}
      #     working-directory: /home/ubuntu
      #     command: |
      #       sudo docker-compose stop
      #       sudo docker-compose rm -f
      #       sudo docker-compose pull
      #       sudo docker-compose up -d
      #       sudo docker image prune -af
      #     comment: docker-compose.yml file re-pulls newer versions of inventory-system images and runs them on the instance.
